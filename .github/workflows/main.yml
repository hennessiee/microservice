name: Connect VPN
on: push

jobs:
  Setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache OpenConnect .deb Package
        uses: actions/cache@v4
        id: cache-openconnect
        with:
          path: ./packages
          key: ${{ runner.os }}-openconnect-${{ hashFiles('package-list.txt') }}
          restore-keys: |
            ${{ runner.os }}-openconnect-
      - name: Download OpenConnect Package
        if: steps.cache-openconnect.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./packages
          apt-get download openconnect
          mv openconnect_*.deb ./packages/
        shell: bash

      - name: Install OpenConnect from Cached Package
        run: |
          sudo dpkg -i ./packages/openconnect_*.deb || sudo apt-get install -f -y
          sudo /sbin/modprobe tun
        shell: bash

      - name: Install AnyConnect VPN & Login
        env:
          VPN_USERNAME: ${{ secrets.USERNAME }}
          VPN_PASSWORD: ${{ secrets.PASSWORD }}
        run: |
          printf 'Netlab Fontys ICT\n%s\n%s\n' "$VPN_USERNAME" "$VPN_PASSWORD" | sudo openconnect vpn.netlab.fontysict.nl -b
        shell: bash

      - name: Verify VPN Connection
        run: |
          ifconfig
          ping -c 4 ${{ secrets.IP_ADDRESS }}
        shell: bash

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keygen -lf ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.IP_ADDRESS }} >> ~/.ssh/known_hosts
        shell: bash
        
   #   - name: Check VM status
   #     run: |
   #      sshpass -p "${{ secrets.SSH_PASS }}" ssh -o StrictHostKeyChecking=no worker@${{ secrets.IP_ADDRESS }} "ping -c 4 192.168.141.128"
   #    shell: bash

      - name: Upload Manifests
        run: |
          sshpass -p "${{ secrets.SSH_PASS }}" scp -r ./k8s-config worker@${{ secrets.IP_ADDRESS }}:/home/worker/k8s-config
          
      - name: Apply Kubernetes config on VM
        run: |
          sshpass -p "${{ secrets.SSH_PASS }}" ssh -o StrictHostKeyChecking=no worker@${{ secrets.IP_ADDRESS }} "
                      echo '${{ secrets.SSH_PASS }}' | sudo -S su -c 'export KUBECONFIG=/etc/rancher/rke2/rke2.yaml && kubectl apply -f /home/worker/k8s-config'"
    #initialy do this:
    #            echo '${{ secrets.SSH_PASS }}' | sudo -S su -c 'export KUBECONFIG=/etc/rancher/rke2/rke2.yaml && kubectl create clusterrolebinding worker-admin-binding --clusterrole=cluster-admin --user=worker' &&

      - name: Check pod status
        run: |
          sshpass -p "${{ secrets.SSH_PASS }}" ssh -o StrictHostKeyChecking=no worker@${{ secrets.IP_ADDRESS }} "
                      echo '${{ secrets.SSH_PASS }}' | sudo -S su -c 'kubectl get pods'"
          
      - name: Disconnect VPN
        if: always()
        run: |
          sudo pkill openconnect || true
        shell: bash
